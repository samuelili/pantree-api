// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
  name, description, steps, ingredients, creatorId
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, description, steps, ingredients, creatorid
`

type CreateRecipeParams struct {
	Name        string
	Description pgtype.Text
	Steps       []string
	Ingredients []string
	Creatorid   pgtype.UUID
}

// $1: name
// $2: description
// $3: steps
// $4: ingredients
// $5: creatorId
func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, createRecipe,
		arg.Name,
		arg.Description,
		arg.Steps,
		arg.Ingredients,
		arg.Creatorid,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Steps,
		&i.Ingredients,
		&i.Creatorid,
	)
	return i, err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, name, description, steps, ingredients, creatorid FROM recipes
WHERE id = $1 LIMIT 1
`

// $1: recipeId
func (q *Queries) GetRecipe(ctx context.Context, id pgtype.UUID) (Recipe, error) {
	row := q.db.QueryRow(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Steps,
		&i.Ingredients,
		&i.Creatorid,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, name, description, steps, ingredients, creatorid FROM recipes
`

// $1: userId
func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Steps,
			&i.Ingredients,
			&i.Creatorid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :exec
UPDATE recipes
SET
  name = COALESCE($1, name),
  description = COALESCE($2, description),
  steps = COALESCE($3, steps),
  ingredients = COALESCE($4, ingredients)
WHERE id = $5
RETURNING id, name, description, steps, ingredients, creatorid
`

type UpdateRecipeParams struct {
	Name        pgtype.Text
	Description pgtype.Text
	Steps       []string
	Ingredients []string
	ID          pgtype.UUID
}

// all fields are optional except for id
func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) error {
	_, err := q.db.Exec(ctx, updateRecipe,
		arg.Name,
		arg.Description,
		arg.Steps,
		arg.Ingredients,
		arg.ID,
	)
	return err
}
